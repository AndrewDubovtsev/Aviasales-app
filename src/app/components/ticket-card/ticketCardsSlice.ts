import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { RootState } from "../../store";
// API
import TicketCards from "./ticketCardsAPI";

export interface TicketCardInterface {
  id: string;
  price: number;
  companyId: string; // Airline company
  info: {
    origin: CityCodes;
    destination: CityCodes;
    dateStart: string; // Departure date
    dateEnd: string; // Arrival date
    stops: CityCodes[]; // Stops
    duration: number; // Duration of the flight in milliseconds
  };
}

// List of the airports codes
type CityCodes =
  | "MOW"
  | "HKT"
  | "HKG"
  | "JNB"
  | "PTB"
  | "ARH"
  | "TRN"
  | "KRS"
  | "SRT"
  | "LOS"
  | "EKV"
  | "EKT";

export enum TicketCardsStatus {
  "IDLE" = "idle",
  "LOADING" = "loading",
  "SUCCEEDED" = "suceeeded",
  "FAILED" = "failed",
}

export interface TicketCardsState {
  ticketCardsList: TicketCardInterface[] | [];
  status: TicketCardsStatus;
}

const initialState: TicketCardsState = {
  ticketCardsList: [],
  status: TicketCardsStatus.IDLE,
};

// Fetching a list of ticket cards
export const fetchTicketCards = createAsyncThunk(
  "ticketCards/fetchTicketCards",
  async () => {
    const response = await TicketCards.list();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// @ts-ignore
export const ticketCardsSlice = createSlice({
  name: "ticketCards",
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchTicketCards.pending, (state) => {
        state.status = TicketCardsStatus.LOADING;
      })
      .addCase(fetchTicketCards.fulfilled, (state, action) => {
        state.status = TicketCardsStatus.SUCCEEDED;
        // @ts-ignore
        state.ticketCardsList = state.ticketCardsList.concat(action.payload);
      })
      .addCase(fetchTicketCards.rejected, (state) => {
        state.status = TicketCardsStatus.FAILED;
      });
  },
});

export const selectTicketCards = (state: RootState) =>
  // @ts-ignore
  state.ticketCards.ticketCardsList;

export default ticketCardsSlice.reducer;
